{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","value","type","onChange","target","getGif","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","index","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categorias","item","ReactDOM","render","document","getElementById"],"mappings":"yLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACXC,mBAAS,IADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAa/C,OACC,sBAAMC,SARc,SAACC,GACfA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAIxB,SACC,uBAAOO,KAAK,OAAOC,SAZA,SAACN,GACrBF,EAAcE,EAAEO,OAAOH,QAWqBA,MAAOP,O,+BCjBvCW,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTC,EADS,iDACsCC,UAAUH,GADhD,+DAEGI,MAAMF,GAFT,cAEfG,EAFe,gBAGEA,EAAUC,OAHZ,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARf,kBAWbM,GAXa,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACxC,OACC,sBAAKc,UAAU,UAAf,UACC,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,qBAAKI,UAAU,2BAAf,SAA2CJ,QCFjCO,EAAU,SAAC,GAA0B,IAAxBnB,EAAuB,EAAvBA,UAAuB,KAAZoB,MCFT,SAACpB,GAAe,IAAD,EAChBb,mBAAS,CAClCoB,KAAM,GACNc,SAAS,IAHgC,mBACnCC,EADmC,KAC5BC,EAD4B,KAc1C,OARAC,qBAAU,WACHzB,EAAOC,GACNyB,MAAK,SAAAf,GAAG,OAAGa,EAAS,CACjBhB,KAAKG,EACLW,SAAQ,SAEhB,CAACrB,IAEGsB,EDVeI,CAAa1B,IAA5BO,EAFyC,EAEzCA,KAAKc,EAFoC,EAEpCA,QAEZ,OACC,qCACC,qBAAoBL,UAAU,oBAA9B,cAAoDhB,EAApD,MAASA,GACRqB,GAAW,cACZ,qBAAKL,UAAU,YAAf,SACET,EAAKE,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEVdgB,EAAe,WAAO,IAAD,EACGxC,mBAAS,CAAC,cADb,mBAC1ByC,EAD0B,KACd1C,EADc,KAGjC,OACC,qCACC,8CACS,cAAC,EAAD,CAAaA,cAAeA,IACrC,uBACA,6BACE0C,EAAWnB,KAAI,SAACoB,GAAD,OACf,cAAC,EAAD,CAAoB7B,UAAW6B,GAAjBA,OAFR,c,MCNXC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d1249eb2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\tconst handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategorias(value => [inputValue,...value]);\r\n            setInputValue('');\r\n        }\r\n\t};\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input type=\"text\" onChange={handleChange} value={inputValue} />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\n\r\nAddCategory.propTypes={\r\n    setCategorias:PropTypes.func.isRequired\r\n}","\r\n\texport const getGif = async (categoria) => {\r\n        const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=9aumVRSseCxQv2xQIvqv74FzVhRkjsq3`;\r\n\t\tconst respuesta = await fetch(url);\r\n\t\tconst { data } = await respuesta.json();\r\n\t\tconst gifs = data.map((img) => {\r\n\t\t\treturn {\r\n\t\t\t\tid: img.id,\r\n\t\t\t\ttitle: img.title,\r\n\t\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t\t};\r\n\t\t});\r\n\t\t return gifs;\r\n\t};","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\treturn (\r\n\t\t<div className='card \t'>\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t\t<div className=\"titulo animate__delay-3s\">{title}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ categoria, index }) => {\r\n\r\n\tconst {data,loading} =useFetchGifs(categoria);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h4 key={categoria} className='animate__delay-3s'> {categoria} </h4>\r\n\t\t\t{loading && 'Cargando...'}\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{data.map((img) => (\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGif } from '../helpers/getGifs';\r\nexport const useFetchGifs = (categoria) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n        getGif(categoria)\r\n        .then(img=> setState({\r\n            data:img,\r\n            loading:false\r\n        }))\r\n\t}, [categoria]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\tconst [categorias, setCategorias] = useState(['One Punch']);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias} />\r\n\t\t\t<hr />\r\n\t\t\t<ol key=\"Expert\">\r\n\t\t\t\t{categorias.map((item) => (\r\n\t\t\t\t\t<GifGrid key={item} categoria={item} />\r\n\t\t\t\t))}\r\n\t\t\t</ol>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render( \n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}